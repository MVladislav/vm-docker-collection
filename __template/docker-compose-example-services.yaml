---
services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  dragonfly:
    # https://github.com/dragonflydb/dragonfly/releases
    image: docker.dragonflydb.io/dragonflydb/dragonfly:${VERSION_DRAGONFLY:-v1.29.0}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_DRAGONFLY:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_DRAGONFLY:-512m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_DRAGONFLY:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_DRAGONFLY:-32m}
    cap_add:
      - SETUID
      - SETGID
    volumes:
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
      - dragonfly:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  ##############################################################################
  ##############################################################################
  ##############################################################################
  valkey:
    # https://hub.docker.com/r/valkey/valkey
    image: valkey/valkey:${VERSION_VALKEY:-8.1.0-alpine}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_VALKEY:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_VALKEY:-128m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_VALKEY:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_VALKEY:-32m}
    cap_add:
      - SETUID
      - SETGID
    volumes:
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
      - valkey:/data
    command: --save 300 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
      # test: ["CMD", "valkey-", "--raw", "incr", "ping"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  ##############################################################################
  ##############################################################################
  ##############################################################################
  minio:
    # https://hub.docker.com/r/minio/minio
    image: minio/minio:${VERSION_MINIO:-RELEASE.2025-05-24T17-08-30Z-cpuv1}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_MINIO:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_MINIO:-1g}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_MINIO:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_MINIO:-32m}
    # ports:
    #   - target: ${PORT_MINIO:-9001}
    #     published: ${PORT_MINIO_PUBLISH:-9001}
    #     protocol: tcp
    #     mode: host
    secrets:
      - minio_root_password_file
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/minio_root_password_file
      # MINIO_BROWSER_REDIRECT_URL: https://${DOMAIN?domain variable not set}
    volumes:
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
      - minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  ##############################################################################
  ##############################################################################
  ##############################################################################
  postgresql:
    # https://hub.docker.com/_/postgres
    image: postgres:${VERSION_POSTGRESQL:-17.5-alpine}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_POSTGRESQL:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_POSTGRESQL:-512m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_POSTGRESQL:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_POSTGRESQL:-32m}
    cap_add:
      - CHOWN
      - FOWNER
      - DAC_READ_SEARCH
      - SETUID
      - SETGID
    secrets:
      - postgres_password_file
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgresql}
      POSTGRES_USER: ${POSTGRES_USER:-postgresql}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password_file
      PGDATA: /var/lib/postgresql/data
      # POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
      - postgresql:/var/lib/postgresql/data
    networks:
      default: {}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  ##############################################################################
  ##############################################################################
  ##############################################################################
  mariadb:
    # https://hub.docker.com/_/mariadb
    image: mariadb:${VERSION_MARIADB:-11.7.2}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_MARIADB:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_MARIADB:-512m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_MARIADB:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_MARIADB:-32m}
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    # ports:
    #   - target: ${PORT_MARIADB:-3306}
    #     published: ${PORT_MARIADB_PUBLISH:-3306}
    #     protocol: tcp
    #     mode: host
    secrets:
      - mariadb_root_password
      - mariadb_user_password
    environment:
      TZ: ${TZ:-Europe/Berlin}
      MARIADB_DATABASE: ${MARIADB_DATABASE:-mariadb}
      MARIADB_USER: ${MARIADB_USER:-mariadb}
      MARIADB_PASSWORD_FILE: /run/secrets/mariadb_user_password
      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/mariadb_root_password
      # MARIADB_RANDOM_ROOT_PASSWORD: ${MARIADB_RANDOM_ROOT_PASSWORD:-true}
    volumes:
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
      - mariadb:/var/lib/mysql
    command:
      - --log-bin=mysql-bin
      - --expire-logs-days=90
    networks:
      default: {}
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      # test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh --no-defaults"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  ##############################################################################
  ## NOTE: for PostgreSQL and MySQL ############################################
  ##############################################################################
  adminer:
    # https://hub.docker.com/_/adminer
    image: adminer:${VERSION_ADMINER:-4.8.1-standalone}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_ADMINER:-0.25}
          memory: ${RESOURCES_LIMITS_MEMORY_ADMINER:-256m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_ADMINER:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_ADMINER:-32m}
    # ports:
    #   - target: ${PORT_ADMINER:-8080}
    #     published: ${PORT_ADMINER_PUBLISH:-8080}
    #     protocol: tcp
    #     mode: host
    environment:
      ADMINER_DEFAULT_SERVER: mysql # mysql | postgresql
      ADMINER_PLUGINS: "tables-filter tinymce file-upload"
      ADMINER_DESIGN: "hydra"
    # volumes:
    #   - /etc/timezone:/etc/timezone:ro
    #   - /etc/localtime:/etc/localtime:ro
    command: php -S 0.0.0.0:8080 -t /var/www/html
    networks:
      default: {}

  ##############################################################################
  ## NOTE: for PostgreSQL and MySQL ############################################
  ## TODO: not complete ready       ############################################
  ##############################################################################
  phpmyadmin:
    # https://hub.docker.com/_/phpmyadmin
    image: phpmyadmin:${VERSION_PHPMYADMIN:-5.2.0-apache}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_PHPMYADMIN:-0.25}
          memory: ${RESOURCES_LIMITS_MEMORY_PHPMYADMIN:-256m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_PHPMYADMIN:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_PHPMYADMIN:-32m}
    # ports:
    #   - target: ${PORT_PHPMYADMIN:-80}
    #     published: ${PORT_PUBLISH_PHPMYADMIN:-80}
    #     protocol: tcp
    #     mode: host
    environment:
      PMA_HOST: mariadb
      PMA_PORT: 3306
      UPLOAD_LIMIT: 1G
      APACHE_PORT: 8080
    # volumes:
    #   - /etc/timezone:/etc/timezone:ro
    #   - /etc/localtime:/etc/localtime:ro
    networks:
      default: {}

  ##############################################################################
  ##############################################################################
  ##############################################################################
  influxdb:
    # https://hub.docker.com/_/influxdb
    image: influxdb:${VERSION_INFLUXDB:-2.7.11-alpine}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_INFLUXDB:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_INFLUXDB:-512m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_INFLUXDB:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_INFLUXDB:-32m}
    cap_add:
      - SETUID
      - SETGID
      - CHOWN
      - DAC_OVERRIDE
    # ports:
    #   - target: ${PORT_INFLUXDB:-8086}
    #     published: ${PORT_INFLUXDB_PUBLISH:-8086}
    #     protocol: tcp
    #     mode: host
    secrets:
      - influxdb_init_password
    environment:
      DOCKER_INFLUXDB_INIT_MODE: ${DOCKER_INFLUXDB_INIT_MODE:-setup}
      DOCKER_INFLUXDB_INIT_USERNAME: ${DOCKER_INFLUXDB_INIT_USERNAME:-root}
      DOCKER_INFLUXDB_INIT_PASSWORD_FILE: /run/secrets/influxdb_init_password
      DOCKER_INFLUXDB_INIT_ORG: ${DOCKER_INFLUXDB_INIT_ORG:-my_orga}
      DOCKER_INFLUXDB_INIT_BUCKET: ${DOCKER_INFLUXDB_INIT_BUCKET:-db0}
      # DOCKER_INFLUXDB_INIT_RETENTION: ${DOCKER_INFLUXDB_INIT_RETENTION:-1w}
      # DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN:-my-super-secret-auth-token}
    networks:
      default: {}
    volumes:
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
      - influxdb-storage:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2

  ##############################################################################
  ##############################################################################
  ##############################################################################
  # ```sh
  # $docker exec -it "$(docker ps -q -f name=mongodb_mongodb)" mongosh --port 27017 --authenticationDatabase "admin" -u "root" -p
  # ```

  # ```mongodb
  # use graylog
  # db.createUser(
  #   {
  #     user: "graylog",
  #     pwd:  passwordPrompt(),   // or cleartext password
  #     roles: [ { role: "readWrite", db: "graylog" } ]
  #   }
  # )
  # ```
  ##############################################################################
  mongodb:
    # https://hub.docker.com/_/mongo
    image: mongo:${VERSION_MONGODB:-8.0.8}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_MONGODB:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_MONGODB:-1g}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_MONGODB:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_MONGODB:-32m}
    cap_add:
      - CHOWN
      - FOWNER
      - DAC_READ_SEARCH
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    # ports:
    #   - target: ${PORT_MONGODB:-27017}
    #     published: ${PORT_MONGODB_PUBLISH:-27017}
    #     protocol: tcp
    #     mode: host
    secrets:
      - mongo_initdb_root_password
    environment:
      TZ: ${TZ:-Europe/Berlin}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_initdb_root_password
    networks:
      default: {}
    volumes:
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
      - mongodb:/data/db

  ##############################################################################
  ## NOTE: for mongoDB              ############################################
  ## TODO: not complete ready       ############################################
  ##############################################################################
  mongo-express:
    # https://hub.docker.com/_/mongo-express
    image: mongo-express:${VERSION_EXPRESS:-0.54.0}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_EXPRESS:-0.25}
          memory: ${RESOURCES_LIMITS_MEMORY_EXPRESS:-256m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_EXPRESS:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_EXPRESS:-32m}
    # ports:
    #   - target: ${PORT_EXPRESS:-8081}
    #     published: ${PORT_PUBLISH_EXPRESS:-8081}
    #     protocol: tcp
    #     mode: host
    secrets:
      - me_config_basicauth_password
      - mongo_initdb_root_password
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD_FILE: /run/secrets/me_config_basicauth_password
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      ME_CONFIG_MONGODB_ADMINPASSWORD_FILE: /run/secrets/mongo_initdb_root_password
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_OPTIONS_EDITORTHEME: midnight
    # volumes:
    #   - /etc/timezone:/etc/timezone:ro
    #   - /etc/localtime:/etc/localtime:ro
    networks:
      default: {}

  ##############################################################################
  ##############################################################################
  ##############################################################################
  rabbitmq:
    # https://hub.docker.com/_/rabbitmq
    image: rabbitmq:${VERSION_RABBITMQ:-3}
    # <<: *basic
    deploy:
      # <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_RABBITMQ:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_RABBITMQ:-512m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_RABBITMQ:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_RABBITMQ:-32m}
    networks:
      default: {}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 3

################################################################################
################################################################################
################################################################################

volumes:
  dragonfly: {}
  valkey: {}
  minio: {}
  postgresql: {}
  mariadb: {}
  influxdb-storage: {}
  influxdb-config: {}
  mongodb: {}

secrets:
  minio_root_password_file:
    file: config/secrets/minio_root_password_file.txt
  postgres_password_file:
    file: config/secrets/postgres_password_file.txt
  mariadb_root_password:
    file: config/secrets/mariadb_root_password.txt
  mariadb_user_password:
    file: config/secrets/mariadb_user_password.txt
  mongo_initdb_root_password:
    file: config/secrets/mongo_initdb_root_password.txt
  me_config_basicauth_password:
    file: config/secrets/me_config_basicauth_password.txt
  influxdb_init_password:
    file: config/secrets/influxdb_init_password.txt
