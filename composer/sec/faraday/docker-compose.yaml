---
x-basic-deploy-labels: &basic-deploy-labels
  labels:
    - traefik.enable=true
    - traefik.docker.lbswarm=${LB_SWARM:-true}
    - traefik.docker.network=proxy
    - traefik.http.routers.faraday.entrypoints=${TRAEFIK_ENTRYPOINT:-https}
    - traefik.http.routers.faraday.rule=Host(`${DOMAIN?domain variable not set}`)
    - traefik.http.routers.faraday.tls=true
    - traefik.http.routers.faraday.middlewares=${MIDDLEWARE_SECURED:-default-secured@file}
    - traefik.http.routers.faraday.service=faraday
    - traefik.http.services.faraday.loadbalancer.server.scheme=${PROTOCOL:-http}
    - traefik.http.services.faraday.loadbalancer.server.port=${PORT:-5985}

x-basic-deploy: &basic-deploy
  mode: replicated
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - "node.role==${NODE_ROLE:-manager}"
      - node.platform.os == linux
  restart_policy:
    condition: on-failure
  resources:
    limits:
      cpus: ${RESOURCES_LIMITS_CPUS:-1}
      memory: ${RESOURCES_LIMITS_MEMORY:-1g}
    reservations:
      cpus: ${RESOURCES_RESERVATIONS_CPUS:-0.001}
      memory: ${RESOURCES_RESERVATIONS_MEMORY:-32m}

x-basic: &basic
  env_file: ${ENV_FILE:-.env}
  cap_drop: ["ALL"]
  security_opt:
    - no-new-privileges:true
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 65535
      hard: 65535
    fsize: -1
    as: -1
  networks:
    default: {}
  healthcheck:
    disable: true
  restart: always

################################################################################
################################################################################
################################################################################

services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  faraday:
    # https://hub.docker.com/r/faradaysec/faraday
    image: faradaysec/faraday:${VERSION_FARADAY:-5.1.1}
    <<: [*basic, *basic-deploy-labels]
    deploy:
      <<: [*basic-deploy, *basic-deploy-labels]
    cap_add:
      - DAC_READ_SEARCH
      - FOWNER
      - FSETID
      - SETGID
      - SETUID
    # ports:
    #   - target: ${PORT:-5985}
    #     published: ${PORT_PUBLISH:-5985}
    #     protocol: tcp
    #     mode: host
    # ports:
    #   - target: ${PORT_9000:-9000}
    #     published: ${PORT_PUBLISH_9000:-9000}
    #     protocol: tcp
    #     mode: host
    secrets:
      - postgres_password_file
    environment:
      LISTEN_ADDR: ${LISTEN_ADDR:-0.0.0.0}

      REDIS_SERVER: ${REDIS_SERVER:-redis}

      PGSQL_DBNAME: ${POSTGRES_DB:-faraday}
      PGSQL_USER: ${POSTGRES_USER:-faraday}
      PGSQL_PASSWD: ${PGSQL_PASSWD:-/run/secrets/postgres_password_file}
      PGSQL_HOST: ${POSTGRES_HOST:-postgresql}
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - data:/home/faraday/.faraday
    entrypoint: /entrypoint.sh

    networks:
      default: {}
      proxy: {}

  ##############################################################################
  ##############################################################################
  ##############################################################################
  postgresql:
    # https://hub.docker.com/_/postgres
    image: postgres:${VERSION_POSTGRESQL:-16.2-alpine3.19}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_POSTGRESQL:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_POSTGRESQL:-500M}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_POSTGRESQL:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_POSTGRESQL:-32m}
    cap_add:
      - FOWNER
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    secrets:
      - postgres_password_file
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-faraday}
      POSTGRES_USER: ${POSTGRES_USER:-faraday}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password_file
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - postgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 5s
      interval: 10s
      retries: 5
      timeout: 3s

  ##############################################################################
  ##############################################################################
  ##############################################################################
  redis:
    # https://hub.docker.com/_/redis
    image: redis:${VERSION_REDIS:-7.2.4-alpine3.19}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_REDIS:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_REDIS:-128M}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_REDIS:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_REDIS:-32m}
    cap_add:
      - SETGID
      - SETUID
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - redis:/data
    command: --save 300 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 5s
      interval: 10s
      retries: 5
      timeout: 3s

################################################################################
################################################################################
################################################################################
networks:
  default:
    driver: ${NETWORK_MODE:-overlay}
    attachable: true
    driver_opts:
      encrypted: "true"
  proxy:
    external: true

volumes:
  data: {}
  redis: {}
  postgresql: {}

secrets:
  postgres_password_file:
    file: config/secrets/postgres_password_file.txt
