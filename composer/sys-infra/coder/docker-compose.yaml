---
x-basic-deploy-labels: &basic-deploy-labels
  labels:
    - traefik.enable=true
    - traefik.docker.lbswarm=${LB_SWARM:-true}
    - traefik.docker.network=proxy
    - traefik.http.routers.coder${SERVICE_NAME_POST:-}.entrypoints=${TRAEFIK_ENTRYPOINT:-https}
    - traefik.http.routers.coder${SERVICE_NAME_POST:-}.rule=Host(`${DOMAIN?domain variable not set}`)
    - traefik.http.routers.coder${SERVICE_NAME_POST:-}.tls=true
    - traefik.http.routers.coder${SERVICE_NAME_POST:-}.middlewares=${MIDDLEWARE_SECURED:-default-secured@file}
    - traefik.http.routers.coder${SERVICE_NAME_POST:-}.service=coder${SERVICE_NAME_POST:-}
    - traefik.http.services.coder${SERVICE_NAME_POST:-}.loadbalancer.server.scheme=${PROTOCOL:-http}
    - traefik.http.services.coder${SERVICE_NAME_POST:-}.loadbalancer.server.port=${PORT:-7080}

x-basic-deploy: &basic-deploy
  mode: replicated
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - "node.role==${NODE_ROLE:-manager}"
      - node.platform.os == linux
  restart_policy:
    condition: on-failure
  resources:
    limits:
      cpus: ${RESOURCES_LIMITS_CPUS:-2}
      memory: ${RESOURCES_LIMITS_MEMORY:-1g}
    reservations:
      cpus: ${RESOURCES_RESERVATIONS_CPUS:-0.001}
      memory: ${RESOURCES_RESERVATIONS_MEMORY:-32m}

x-basic: &basic
  env_file: ${ENV_FILE:-.env}
  cap_add: ["ALL"]
  # cap_drop: ["ALL"]
  # security_opt:
  #   - no-new-privileges=true
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 655360
      hard: 655360
    fsize: -1
    as: -1
  networks:
    default: {}
  extra_hosts:
    - "host.docker.internal:host-gateway"
  healthcheck:
    disable: true
  restart: always

################################################################################
################################################################################
################################################################################

services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  coder:
    # https://github.com/coder/coder/pkgs/container/coder
    image: ghcr.io/coder/coder:${VERSION_CODER:-v2.12.1}
    <<: [*basic, *basic-deploy-labels]
    deploy:
      <<: [*basic-deploy, *basic-deploy-labels]
    user: "1000:${GID:-982}"
    environment:
      CODER_PG_CONNECTION_URL: "postgresql://${POSTGRES_USER:-coder}:${POSTGRES_PASSWORD_TMP}@postgresql/${POSTGRES_DB:-coder}?sslmode=disable"
      CODER_HTTP_ADDRESS: "0.0.0.0:7080"
      CODER_ACCESS_URL: https://${DOMAIN?domain variable not set}
      CODER_WILDCARD_ACCESS_URL: "*.${DOMAIN?domain variable not set}"

      CODER_TELEMETRY_ENABLE: "false"
      CODER_BLOCK_DIRECT: "false"
      CODER_DERP_SERVER_STUN_ADDRESSES: "disable"

      CODER_TLS_CERT_FILE: /var/coder/ca.pem
      CODER_TLS_CLIENT_AUTH: "none"
    configs:
      - source: ca_cert_file
        target: /var/coder/ca.pem
        mode: 0444
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      default: {}
      proxy: {}

  ##############################################################################
  ##############################################################################
  ##############################################################################
  postgresql:
    # https://hub.docker.com/_/postgres
    image: postgres:${VERSION_POSTGRESQL:-16.3-alpine3.20}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_POSTGRESQL:-2}
          memory: ${RESOURCES_LIMITS_MEMORY_POSTGRESQL:-1G}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_POSTGRESQL:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_POSTGRESQL:-32m}
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    secrets:
      - postgres_password_file
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-coder}
      POSTGRES_USER: ${POSTGRES_USER:-coder}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password_file
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - postgresql:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB:-coder} -U $${POSTGRES_USER:-coder}",
        ]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

################################################################################
################################################################################
################################################################################
networks:
  default:
    name: coder${SERVICE_NAME_POST:-}
    driver: ${NETWORK_MODE:-bridge}
    attachable: true
    driver_opts:
      encrypted: "true"
  proxy:
    external: true

volumes:
  postgresql:
    name: coder_postgresql${SERVICE_NAME_POST:-}

configs:
  ca_cert_file:
    file: $PWD/config/ca.pem

secrets:
  postgres_password_file:
    file: config/secrets/postgres_password_file.txt
