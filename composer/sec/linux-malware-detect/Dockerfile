ARG VERSION_UBUNTU=24.04
FROM ubuntu:${VERSION_UBUNTU}

# ------------------------------------------------------------------------------

# set version label
ARG BUILD_DATE
ARG VERSION
LABEL build_version="MVladislav version:- ${VERSION} Build-date:- ${BUILD_DATE}"
LABEL maintainer="MVladislav"

# ------------------------------------------------------------------------------

ENV DEBIAN_FRONTEND noninteractive

# ensure local python is preferred over distribution python
ENV PATH /usr/local/bin:$PATH

# ------------------------------------------------------------------------------

## Fix some issues with APT packages.
## See https://github.com/dotcloud/docker/issues/1024
RUN dpkg-divert --local --rename --add /sbin/initctl
RUN ln -sf /bin/true /sbin/initctl

## Replace the 'ischroot' tool to make it always return true.
## Prevent initscripts updates from breaking /dev/shm.
## https://journal.paul.querna.org/articles/2013/10/15/docker-ubuntu-on-rackspace/
## https://bugs.launchpad.net/launchpad/+bug/974584
RUN dpkg-divert --local --rename --add /usr/bin/ischroot
RUN ln -sf /bin/true /usr/bin/ischroot

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

# ------------------------------------------------------------------------------


RUN \
  echo "**** UPDATE - UPGRADE ****" \
  && apt-get update -q \
  && apt-get upgrade -y -q

# LANG SETUP
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
ENV LC_ALL C.UTF-8

# ------------------------------------------------------------------------------

RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
RUN \
  echo "**** install MAIN packages ****" \
  && apt-get install -y --no-install-recommends \
  git \
  wget \
  curl \
  iproute2 \
  nano \
  ca-certificates \
  clamav \
  clamav-daemon \
  inotify-tools \
  python3 \
  yara

RUN \
  echo "**** cleanup ****" \
  && apt-get clean \
  && rm -rf \
  /tmp/* \
  /var/tmp/* \
  /var/lib/apt/lists/* \
  /var/log/* \
  /var/www
RUN \
  echo "**** cleanup ****" \
  rm -f /etc/ssh/ssh_host_* \
  /etc/apache2/sites-available/* \
  /dev/log \
  /var/lib/syslog-ng/syslog-ng.ctl \
  /etc/cron.d/* \
  /etc/cron.hourly/* \
  /etc/cron.daily/* \
  /etc/cron.weekly/* \
  /etc/cron.monthly/* \
  /etc/logrotate.d/*

# ------------------------------------------------------------------------------

RUN \
  echo "**** clone:: linux-malware-detect ****" \
  && cd /tmp \
  && git clone --recursive https://github.com/rfxn/linux-malware-detect.git
RUN \
  echo "**** install:: linux-malware-detect ****" \
  && cd /tmp/linux-malware-detect \
  && ./install.sh
RUN \
  echo "**** conf:: linux-malware-detect ****" \
  && sed -i 's|scan_user_access="0"|scan_user_access="1"|g' /usr/local/maldetect/conf.maldet \
  && sed -i 's|scan_ignore_root="1"|scan_ignore_root="0"|g' /usr/local/maldetect/conf.maldet

RUN \
  echo "**** load:: malware_yara_rules.py ****" \
  && mkdir -p /opt/malware_yara_rules/rules \
  && cd /opt/malware_yara_rules \
  && wget https://gist.githubusercontent.com/andreafortuna/29c6ea48adf3d45a979a78763cdc7ce9/raw/4ec711d37f1b428b63bed1f786b26a0654aa2f31/malware_yara_rules.py \
  && python3 malware_yara_rules.py

# ------------------------------------------------------------------------------

# configure working directory
# WORKDIR /app
# set volumes
VOLUME ["/usr/local/maldetect/sess","/host", "/var/log"]

RUN mkdir /host
ARG SCAN_PATH=/host
ENV SCAN_PATH "$SCAN_PATH"

# configure entry point
RUN echo '#!/bin/sh' > /entrypoint.sh
RUN echo 'echo "################################################################"' >> /entrypoint.sh
RUN echo 'echo "################################################################"' >> /entrypoint.sh
RUN echo 'echo "UPDATE: maldet..."' >> /entrypoint.sh
RUN echo 'maldet -u >/dev/null' >> /entrypoint.sh
RUN echo 'maldet -d >/dev/null' >> /entrypoint.sh
RUN echo 'echo "RUN: maldet"' >> /entrypoint.sh
RUN echo 'maldet -a "$SCAN_PATH"' >> /entrypoint.sh
RUN echo 'cat /usr/local/maldetect/sess/hits.hist' >> /entrypoint.sh
RUN echo 'echo "################################################################"' >> /entrypoint.sh
RUN echo 'echo "################################################################"' >> /entrypoint.sh
RUN echo 'echo "UPDATE: yara..."' >> /entrypoint.sh
# RUN echo 'cd /opt/malware_yara_rules && python3 malware_yara_rules.py >/dev/null' >> /entrypoint.sh
RUN echo 'echo "RUN: yara"' >> /entrypoint.sh
RUN echo 'cd /opt/malware_yara_rules && yara -w malware_rules.yar -f -r "$SCAN_PATH" | grep -v -e ".yar" -e ".yara"' >> /entrypoint.sh

RUN chmod 755 /entrypoint.sh

## configure entry point
ENTRYPOINT [ "/entrypoint.sh" ]
