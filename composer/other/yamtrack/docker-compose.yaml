---
x-basic-deploy-labels: &basic-deploy-labels
  labels:
    - traefik.enable=true
    - traefik.swarm.lbswarm=${LB_SWARM:-true}
    - traefik.swarm.network=proxy
    - traefik.http.routers.yamtrack.entrypoints=${TRAEFIK_ENTRYPOINT:-https}
    - traefik.http.routers.yamtrack.rule=Host(`${DOMAIN?domain variable not set}`)
    - traefik.http.routers.yamtrack.tls=true
    - traefik.http.routers.yamtrack.middlewares=${MIDDLEWARE_SECURED:-default-secured@file}
    - traefik.http.routers.yamtrack.service=yamtrack
    - traefik.http.services.yamtrack.loadbalancer.server.scheme=${PROTOCOL:-http}
    - traefik.http.services.yamtrack.loadbalancer.server.port=${PORT:-8000}

x-basic-deploy: &basic-deploy
  mode: replicated
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - "node.role==${NODE_ROLE:-manager}"
      - node.platform.os == linux
  update_config:
    order: stop-first
  restart_policy:
    condition: any
  resources:
    limits:
      cpus: ${RESOURCES_LIMITS_CPUS:-1}
      memory: ${RESOURCES_LIMITS_MEMORY:-1g}
    reservations:
      cpus: ${RESOURCES_RESERVATIONS_CPUS:-0.001}
      memory: ${RESOURCES_RESERVATIONS_MEMORY:-32m}

x-basic: &basic
  env_file: ${ENV_FILE:-.env}
  cap_drop: ["ALL"]
  security_opt:
    - no-new-privileges:true
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 655360
      hard: 655360
    fsize: -1
    as: -1
  networks:
    default: {}
    proxy: {}
  healthcheck:
    disable: true
  tmpfs:
    - /tmp
  restart: always

################################################################################
################################################################################
################################################################################
services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  yamtrack:
    # https://github.com/fuzzygrim/Yamtrack/pkgs/container/yamtrack
    image: ghcr.io/fuzzygrim/yamtrack:${VERSION_YAMTRACK:-0.24.7}
    <<:
      - *basic
      - *basic-deploy-labels
    deploy:
      <<:
        - *basic-deploy
        - *basic-deploy-labels
    cap_add:
      - CHOWN # Allows changing file ownership (`chown`,`chgrp`)
      - FOWNER # Overrides file ownership checks (`chmod`,`kill`)
      - SETGID # Allows setting group ID (`setgid`,`newgrp`,`chgrp`,`setregid()`)
      - SETUID # Allows setting user ID (`setuid`,`su`,`sudo`,`passwd`)
      - DAC_OVERRIDE # Bypasses file read/write/execute permission checks (`cat`,`touch`,`rm`)
    environment:
      TZ: ${TZ:-Europe/Berlin}
      REDIS_URL: redis://valkey:6379
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - data:/yamtrack/db
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider --no-check-certificate ${PROTOCOL:-http}://127.0.0.1:${PORT:-8000}/health || exit 1",
        ]
      start_period: 10s
      interval: 10s
      timeout: 3s
      retries: 10

  ##############################################################################
  ##############################################################################
  ##############################################################################
  valkey:
    # https://hub.docker.com/r/valkey/valkey
    image: valkey/valkey:${VERSION_VALKEY:-8.1.0-alpine}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_VALKEY:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_VALKEY:-128m}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_VALKEY:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_VALKEY:-32m}
    cap_add:
      - SETUID
      - SETGID
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - valkey:/data
    command: --save 300 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

################################################################################
################################################################################
################################################################################
networks:
  default:
    driver: ${NETWORK_MODE:-overlay}
    attachable: true
    driver_opts:
      encrypted: "true"
  proxy:
    external: true

volumes:
  data: {}
  valkey: {}
