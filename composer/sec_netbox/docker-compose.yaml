version: "3.8"

services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  netbox: &netbox
    image: netboxcommunity/netbox:${VERSION:-v3.0}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          # - "node.id==${NODE_ID}"
          - "node.role==${NODE_ROLE:-manager}"
      restart_policy:
        condition: on-failure
    env_file: $PWD/config/env/netbox.env
    user: "101"
    volumes:
      - $PWD/config/startup_scripts:/opt/netbox/startup_scripts:z,ro
      - $PWD/config/initializers:/opt/netbox/initializers:z,ro
      - $PWD/config/configuration:/etc/netbox/config:z,ro
      - $PWD/config/reports:/etc/netbox/reports:z,ro
      - $PWD/config/scripts:/etc/netbox/scripts:z,ro
      - netbox-media-files:/opt/netbox/netbox/media:z
    networks:
      default: {}
    restart: always

  netbox-worker:
    <<: *netbox
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker

  netbox-housekeeping:
    <<: *netbox
    command:
      - /opt/netbox/housekeeping.sh

  ##############################################################################
  ##############################################################################
  ##############################################################################
  # postgres
  postgres:
    image: postgres:13-alpine
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          # - "node.id==${NODE_ID}"
          - "node.role==${NODE_ROLE:-manager}"
      restart_policy:
        condition: on-failure
    env_file: $PWD/config/env/postgres.env
    volumes:
      # - $PWD/dump.sql:/docker-entrypoint-initdb.d/dump.sql
      - netbox-postgres-data:/var/lib/postgresql/data
    networks:
      default: {}
    restart: always

  ##############################################################################
  ##############################################################################
  ##############################################################################
  # redis
  redis:
    image: redis:6-alpine
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          # - "node.id==${NODE_ID}"
          - "node.role==${NODE_ROLE:-manager}"
      restart_policy:
        condition: on-failure
    env_file: $PWD/config/env/redis.env
    volumes:
      - netbox-redis-data:/data
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    networks:
      default: {}
    restart: always

  redis-cache:
    image: redis:6-alpine
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          # - "node.id==${NODE_ID}"
          - "node.role==${NODE_ROLE:-manager}"
      restart_policy:
        condition: on-failure
    env_file: $PWD/config/env/redis-cache.env
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    networks:
      default: {}
    restart: always

################################################################################
################################################################################
################################################################################
networks:
  default:
    driver: ${NETWORK_MODE:-bridge}

volumes:
  netbox-media-files: {}
  netbox-postgres-data: {}
  netbox-redis-data: {}
# configs:
#   startup_scripts_config:
#     file: $PWD/config/startup_scripts
#   initializers_config:
#     file: $PWD/config/initializers
#   configuration_config:
#     file: $PWD/config/configuration
#   reports_config:
#     file: $PWD/config/reports
#   scripts_config:
#     file: $PWD/config/scripts
