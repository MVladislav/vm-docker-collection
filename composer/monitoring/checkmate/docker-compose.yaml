---
x-basic-deploy-labels: &basic-deploy-labels
  labels:
    - traefik.enable=true
    - traefik.swarm.lbswarm=${LB_SWARM:-true}
    - traefik.swarm.network=proxy
    - traefik.http.routers.checkmate-client.entrypoints=${TRAEFIK_ENTRYPOINT:-https}
    - traefik.http.routers.checkmate-client.rule=Host(`${DOMAIN?domain variable not set}`)
    - traefik.http.routers.checkmate-client.tls=true
    - traefik.http.routers.checkmate-client.middlewares=${MIDDLEWARE_SECURED:-default-secured@file}
    - traefik.http.routers.checkmate-client.service=checkmate-client
    - traefik.http.services.checkmate-client.loadbalancer.server.scheme=${PROTOCOL:-http}
    - traefik.http.services.checkmate-client.loadbalancer.server.port=${PORT:-80}

x-basic-deploy-server-labels: &basic-deploy-server-labels
  labels:
    - traefik.enable=true
    - traefik.swarm.lbswarm=${LB_SWARM:-true}
    - traefik.swarm.network=proxy
    - traefik.http.routers.checkmate-server.entrypoints=${TRAEFIK_ENTRYPOINT:-https}
    - traefik.http.routers.checkmate-server.rule=Host(`${DOMAIN?domain variable not set}`) && PathPrefix(`/api/v1`)
    - traefik.http.routers.checkmate-server.tls=true
    - traefik.http.routers.checkmate-server.middlewares=${MIDDLEWARE_SECURED:-default-secured@file}
    - traefik.http.routers.checkmate-server.service=checkmate-server
    - traefik.http.services.checkmate-server.loadbalancer.server.scheme=${PROTOCOL_SERVER:-http}
    - traefik.http.services.checkmate-server.loadbalancer.server.port=${PORT_SERVER:-52345}

x-basic-deploy: &basic-deploy
  mode: replicated
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - "node.role==${NODE_ROLE:-manager}"
      - node.platform.os == linux
  update_config:
    order: stop-first
  restart_policy:
    condition: any
  resources:
    limits:
      cpus: ${RESOURCES_LIMITS_CPUS:-2}
      memory: ${RESOURCES_LIMITS_MEMORY:-2g}
    reservations:
      cpus: ${RESOURCES_RESERVATIONS_CPUS:-0.001}
      memory: ${RESOURCES_RESERVATIONS_MEMORY:-32m}

x-basic: &basic
  env_file: ${ENV_FILE:-.env}
  cap_drop: ["ALL"]
  security_opt:
    - no-new-privileges:true
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 655360
      hard: 655360
    fsize: -1
    as: -1
  networks:
    default: {}
  healthcheck:
    disable: true
  restart: always

################################################################################
################################################################################
################################################################################
services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  client:
    # https://github.com/bluewave-labs/Checkmate/pkgs/container/checkmate-client
    image: ghcr.io/bluewave-labs/checkmate-client:${VERSION_CHECKMATE:-v2.3.1}
    <<:
      - *basic
      - *basic-deploy-labels
    deploy:
      <<:
        - *basic-deploy
        - *basic-deploy-labels
    cap_add:
      - SETUID
      - SETGID
      - CHOWN
    environment:
      UPTIME_APP_CLIENT_HOST: https://${DOMAIN?domain variable not set}
      UPTIME_APP_API_BASE_URL: https://${DOMAIN?domain variable not set}/api/v1
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      proxy: {}

  server:
    # https://github.com/bluewave-labs/Checkmate/pkgs/container/checkmate-backend
    image: ghcr.io/bluewave-labs/checkmate-backend:${VERSION_CHECKMATE:-v2.3.1}
    <<:
      - *basic
      - *basic-deploy-server-labels
    deploy:
      <<:
        - *basic-deploy
        - *basic-deploy-server-labels
    ports:
      - 52345:52345
    environment:
      CLIENT_HOST: https://${DOMAIN?domain variable not set}
      DB_CONNECTION_STRING: mongodb://mongodb:27017/uptime_db?replicaSet=rs0
      REDIS_HOST: valkey
      REDIS_PORT: 6379
      REDIS_URL: redis://valkey:6379
      ORIGIN: ${DOMAIN?domain variable not set}
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      default: {}
      proxy: {}

  ##############################################################################
  ##############################################################################
  ##############################################################################
  valkey:
    # https://hub.docker.com/r/valkey/valkey
    image: valkey/valkey:${VERSION_VALKEY:-8.1.0-alpine}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_VALKEY:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_VALKEY:-512M}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_VALKEY:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_VALKEY:-32m}
    cap_add:
      - SETUID
      - SETGID
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - valkey:/data
    command: --save 300 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  ##############################################################################
  ##############################################################################
  ##############################################################################
  mongodb:
    # https://hub.docker.com/_/mongo
    image: mongo:${VERSION_MONGODB:-8.0.8}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_MONGODB:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_MONGODB:-2G}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_MONGODB:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_MONGODB:-32m}
    cap_add:
      - CHOWN
      - FOWNER
      - DAC_READ_SEARCH
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    command: ["mongod", "--quiet", "--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - mongodb:/data/db
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

################################################################################
################################################################################
################################################################################
networks:
  default:
    driver: ${NETWORK_MODE:-overlay}
    attachable: true
    driver_opts:
      encrypted: "true"
  proxy:
    external: true

volumes:
  valkey: {}
  mongodb: {}
