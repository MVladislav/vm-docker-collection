---
x-basic-deploy-labels: &basic-deploy-labels
  labels:
    - traefik.enable=true
    - traefik.docker.lbswarm=${LB_SWARM:-true}
    - traefik.docker.network=proxy
    - traefik.http.routers.openproject.entrypoints=${TRAEFIK_ENTRYPOINT:-https}
    - traefik.http.routers.openproject.rule=Host(`${DOMAIN?domain variable not set}`)
    - traefik.http.routers.openproject.tls=true
    - traefik.http.routers.openproject.middlewares=${MIDDLEWARE_SECURED:-default-secured@file}
    - traefik.http.routers.openproject.service=openproject
    - traefik.http.services.openproject.loadbalancer.server.scheme=${PROTOCOL:-http}
    - traefik.http.services.openproject.loadbalancer.server.port=${PORT:-8080}

x-basic-deploy: &basic-deploy
  mode: replicated
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - "node.role==${NODE_ROLE:-manager}"
      - node.platform.os == linux
  update_config:
    order: stop-first
  restart_policy:
    condition: any
  resources:
    limits:
      cpus: ${RESOURCES_LIMITS_CPUS:-4}
      memory: ${RESOURCES_LIMITS_MEMORY:-2g}
    reservations:
      cpus: ${RESOURCES_RESERVATIONS_CPUS:-0.001}
      memory: ${RESOURCES_RESERVATIONS_MEMORY:-32m}

x-basic: &basic
  env_file: ${ENV_FILE:-.env}
  # cap_add:
  #   - CHOWN
  #   - DAC_OVERRIDE
  #   - DAC_READ_SEARCH
  #   - SETGID
  #   - SETUID
  #   - FOWNER
  #   - FSETID
  # cap_drop: ["ALL"]
  # security_opt:
  #   - no-new-privileges=true
  #   # - seccomp=unconfined
  #   # - label=disable
  # pids_limit: 200
  # read_only: ${CONTAINER_READONLY:-false}
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 655360
      hard: 655360
    fsize: -1
    as: -1
  networks:
    default: {}
  healthcheck:
    disable: true
  restart: always

################################################################################
################################################################################
################################################################################
x-op-image: &image # https://hub.docker.com/r/openproject/openproject
  image: openproject/openproject:${VERSION_OPENPROJECT:-15-slim}
x-op-app: &app
  <<: *image
  environment:
    OPENPROJECT_HTTPS: "${OPENPROJECT_HTTPS:-true}"
    OPENPROJECT_HOST__NAME: "${DOMAIN?domain variable not set}"
    OPENPROJECT_HSTS: "${OPENPROJECT_HSTS:-true}"
    OPENPROJECT_DEFAULT__LANGUAGE: ${OPENPROJECT_DEFAULT__LANGUAGE:-en}
    RAILS_CACHE_STORE: "memcache"
    OPENPROJECT_CACHE__MEMCACHE__SERVER: "cache:11211"
    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
    DATABASE_URL: "${DATABASE_URL:-postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD_TMP}@postgresql/${POSTGRES_DB:-openproject}?pool=20&encoding=unicode&reconnect=true}"
    RAILS_MIN_THREADS: ${RAILS_MIN_THREADS:-4}
    RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-16}

    # OPENPROJECT_DISABLED__MODULES: "${OPENPROJECT_DISABLED__MODULES:-backlogs meetings}"

    PGDATA: /var/lib/postgresql/data
    OPDATA: /var/openproject/assets

    # set to true to enable the email receiving feature. See ./docker/cron for more options
    IMAP_ENABLED: "${IMAP_ENABLED:-false}"

    SSL_CERT_FILE: /var/openproject/ca.crt
  configs:
    - source: ca_cert_file
      target: /var/openproject/ca.crt
      mode: 0444
  volumes:
    - /etc/timezone:/etc/timezone:ro
    - /etc/localtime:/etc/localtime:ro
    - "${OPDATA:-opdata}:/var/openproject/assets"
  links:
    - postgresql
    - cache

################################################################################
################################################################################
################################################################################
services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  openproject:
    <<: [*app, *basic, *basic-deploy-labels]
    deploy:
      <<: [*basic-deploy, *basic-deploy-labels]
    labels:
      - autoheal=true
    networks:
      default: {}
      proxy: {}
    # command: "./docker/prod/web"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8080${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}/health_checks/default",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  ##############################################################################
  ##############################################################################
  ##############################################################################
  worker:
    <<: [*app, *basic]
    deploy:
      <<: *basic-deploy
    command: "./docker/prod/worker"

  cron:
    <<: [*app, *basic]
    deploy:
      <<: *basic-deploy
    command: "./docker/prod/cron"

  seeder:
    <<: [*app, *basic]
    deploy:
      <<: *basic-deploy
    command: "./docker/prod/seeder"
    restart: on-failure

  ##############################################################################
  ##############################################################################
  ##############################################################################
  cache:
    # https://hub.docker.com/_/memcached
    image: memcached:${VERSION_MEMCACHED:-1.6.34-alpine}
    <<: *basic
    deploy:
      <<: *basic-deploy
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  ##############################################################################
  ##############################################################################
  ##############################################################################
  postgresql:
    # https://hub.docker.com/_/postgres
    image: postgres:${VERSION_POSTGRESQL:-17.2-alpine}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_POSTGRESQL:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_POSTGRESQL:-512M}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_POSTGRESQL:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_POSTGRESQL:-32m}
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    secrets:
      - postgres_password_file
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-openproject}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password_file
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - postgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 5s
      interval: 10s
      retries: 5
      timeout: 3s

################################################################################
################################################################################
################################################################################
networks:
  default:
    driver: ${NETWORK_MODE:-bridge}
    attachable: true
    driver_opts:
      encrypted: "true"
  proxy:
    external: true

volumes:
  opdata: {}
  postgresql: {}

configs:
  ca_cert_file:
    file: $PWD/config/ca.crt

secrets:
  postgres_password_file:
    file: config/secrets/postgres_password_file.txt
