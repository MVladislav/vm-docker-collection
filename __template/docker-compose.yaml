---
x-basic-deploy-labels: &basic-deploy-labels
  labels:
    - traefik.enable=true
    - traefik.docker.lbswarm=${LB_SWARM:-true}
    - traefik.docker.network=proxy
    - traefik.http.routers.<router_name>${SERVICE_NAME_POST:-}.entrypoints=${TRAEFIK_ENTRYPOINT:-https}
    - traefik.http.routers.<router_name>${SERVICE_NAME_POST:-}.rule=Host(`${DOMAIN?domain variable not set}`)
    - traefik.http.routers.<router_name>${SERVICE_NAME_POST:-}.tls=true
    - traefik.http.routers.<router_name>${SERVICE_NAME_POST:-}.middlewares=${MIDDLEWARE_SECURED:-default-secured@file}
    - traefik.http.routers.<router_name>${SERVICE_NAME_POST:-}.service=<router_name>${SERVICE_NAME_POST:-}
    - traefik.http.services.<router_name>${SERVICE_NAME_POST:-}.loadbalancer.server.scheme=${PROTOCOL:-https}
    - traefik.http.services.<router_name>${SERVICE_NAME_POST:-}.loadbalancer.server.port=${PORT:-443}

x-basic-deploy: &basic-deploy
  mode: replicated
  # mode: global
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      # - "node.id==${NODE_ID}"
      - "node.role==${NODE_ROLE:-manager}"
      - node.platform.os == linux
  restart_policy:
    condition: any # any | on-failure | none
  resources:
    limits:
      cpus: ${RESOURCES_LIMITS_CPUS:-1}
      memory: ${RESOURCES_LIMITS_MEMORY:-1g}
    reservations:
      cpus: ${RESOURCES_RESERVATIONS_CPUS:-0.001}
      memory: ${RESOURCES_RESERVATIONS_MEMORY:-32m}

x-basic: &basic
  env_file: .env
  # user: "${GID:-1000}:${UID:-1000}"
  # privileged: true
  # stdin_open: true # docker run -i
  # tty: true # docker run -t
  # cap_add:
  #   # https://dockerlabs.collabnix.com/advanced/security/capabilities/
  #   - CHOWN # (chmod)
  #   - DAC_OVERRIDE
  #   - DAC_READ_SEARCH
  #   - SETGID # (setgroups)
  #   - SETUID # (setuid)
  #   - FOWNER # (chmod, chown, or chgrp)
  #   - FSETID
  #   # --------------------------
  #   - NET_ADMIN
  #   - NET_RAW
  #   - NET_BIND_SERVICE
  #   - NET_BROADCAST
  #   - SYS_MODULE
  #   - SYS_NICE
  #   - AUDIT_CONTROL
  #   - AUDIT_READ
  #   # --------------------------
  #   - KILL
  #   - SETPCAP
  #   - LINUX_IMMUTABLE
  #   - IPC_LOCK
  #   - IPC_OWNER
  #   - SYS_RAWIO
  #   - SYS_CHROOT
  #   - SYS_PTRACE
  #   - SYS_PACCT
  #   - SYS_ADMIN
  #   - SYS_BOOT
  #   - SYS_RESOURCE
  #   - SYS_TIME
  #   - SYS_TTY_CONFIG
  #   - MKNOD
  #   - LEASE
  #   - AUDIT_WRITE
  #   - SETFCAP
  #   - MAC_OVERRIDE
  #   - MAC_ADMIN
  #   - SYSLOG
  #   - WAKE_ALARM
  #   - BLOCK_SUSPEND
  # cap_drop: ["ALL"]
  # security_opt:
  #   - no-new-privileges=true
  #   # - seccomp=unconfined
  #   # - label=disable
  # pids_limit: 200
  # read_only: ${CONTAINER_READONLY:-false}
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 655360
      hard: 655360
    fsize: -1
    as: -1
  # mem_limit: 1g
  networks:
    default: {}
    proxy: {}
  # network_mode: host
  healthcheck:
    disable: true
  tmpfs:
    - /tmp
  sysctls:
    - net.ipv4.ip_forward=1
    - net.ipv4.conf.all.src_valid_mark=1
    - net.ipv4.conf.all.rp_filter=0
    - net.ipv4.conf.default.rp_filter=0
    - net.ipv4.conf.eth0.rp_filter=0
    - net.ipv4.conf.lo.rp_filter=0
    - net.ipv6.conf.all.forwarding=1
    - net.ipv6.conf.all.disable_ipv6=0
  restart: always # always | on-failure

x-logging: &logging
  logging:
    # https://docs.docker.com/config/containers/logging/configure/#supported-logging-drivers
    driver: json-file # none|local|json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs|logentries
    options:
      max-size: "10m" # Set maximum log file size
      max-file: 3 # Set maximum number of log files
      compress: "true" # Enable log file compression
      labels: app=example # Add custom labels to log messages
      # # => gelf
      # gelf-address: "tcp://graylog-server:12201"
      # gelf-compression-type: zlib
      # tag: "log-gelf"
      # tls: "true"
      # tls-verify: "true"  # Enable TLS verification
      # tls-ca-cert: /path/to/ca-cert.pem  # Path to CA certificate file
      # tls-cert: /path/to/client-cert.pem  # Path to client certificate file
      # tls-key: /path/to/client-key.pem  # Path to client private key file

################################################################################
################################################################################
################################################################################

x-base-env: &base-env
  TZ: ${TIMEZONE:-Europe/Berlin}
  PUID: ${PUID:-$UID}
  PGID: ${PGID:-$GID}

services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  app:
    build:
      context: .
      dockerfile: ./Dockerfile
      # context: https://github.com/<TODO>/<TODO>.git#main
      # dockerfile: ./Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-2022}
        VERSION: ${VERSION:-latest}
    image: localhost:5000/...:${VERSION:-latest}
    <<: [*basic, *basic-deploy-labels, *logging]
    deploy:
      <<: [*basic-deploy, *basic-deploy-labels]
    # ports:
    #   - target: ${PORT:-...}
    #     published: ${PORT_PUBLISH:-...}
    #     protocol: tcp
    #     mode: host
    secrets:
      - my_external_secret
      - my_file_secret
      - source: own_secret
        uid: "1000"
        gid: "1000"
        mode: 400
    environment:
      <<: *base-env
      MY_EXTERNAL_SECRET_FILE: /run/secrets/my_external_secret
      MY_FILE_SECRET_FILE: /run/secrets/my_file_secret
    # configs:
    #   - source: xx_config
    #     target: ...
    #     mode: 0440
    #     uid: "1000"
    #     gid: "1000"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - data:/root
      # - type: bind
      #   source: ./logstash/config/logstash.yml
      #   target: /usr/share/logstash/config/logstash.yml
      #   read_only: true
    # devices:
    #   - /dev/kfd # main compute interface
    #   - /dev/dri # Direct Rendering Interface
    #   # - /dev/dri/renderD128 # instead of dri, pass each device individually (number needs to be adjust)
    # group_add:
    #   - video
    # command: >
    #   ...
    healthcheck:
      # test:
      #   [
      #     "CMD",
      #     "curl",
      #     "-f",
      #     "${PROTOCOL:-https}://127.0.0.1:${PORT:-443}",
      #     ".......................",
      #     "CMD",
      #     "wget",
      #     "--no-verbose",
      #     "--tries=1",
      #     "--spider",
      #     "--no-check-certificate",
      #     "${PROTOCOL:-https}://127.0.0.1:${PORT:-443}",
      #     "CMD-SHELL",
      #     "wget --no-verbose --tries=1 --spider --no-check-certificate ${PROTOCOL:-https}://127.0.0.1:${PORT:-443} || exit 1"
      #   ]
      # start_period: 5s
      # interval: 10s
      # retries: 5
      # timeout: 3s
      disable: true

################################################################################
################################################################################
################################################################################
networks:
  default:
    # name: proxy${SERVICE_NAME_POST:-}
    driver: ${NETWORK_MODE:-bridge}
    attachable: true
    driver_opts:
      encrypted: "true"
  proxy:
    external: true
#
# volumes:
#   data:
#     name: data${SERVICE_NAME_POST:-}
#   ## sudo apt install nfs-common
#   # nas-data:
#   #   # name: nas-data
#   #   driver: local
#   #   driver_opts:
#   #     type: nfs
#   #     o: nfsvers=4,addr=${NAS_HOST},rw,noatime,rsize=8192,wsize=8192,tcp,timeo=14
#   #     device: ":${NAS_PATH}"
#   # smb-data:
#   #   # name: smb-data
#   #   driver: local
#   #   driver_opts:
#   #     type: cifs
#   #     device: "//${NAS_HOST}${NAS_PATH:-/}"
#   #     o: "username=${NAS_USERNAME},password=${NAS_PASSWORD},vers=3.0,uid=${NAS_PUID:-1000},gid=${NAS_PGID:-1000}"
#
# configs:
#   xx_config:
#     file: $PWD/config/...
#
# secrets:
#   # echo "This is an external secret" | docker secret create my_external_secret -
#   my_external_secret:
#     external: true
#   my_file_secret:
#     file: config/secrets/my_file_secret.txt
