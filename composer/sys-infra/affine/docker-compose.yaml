---
x-basic-deploy-labels: &basic-deploy-labels
  labels:
    - traefik.enable=true
    - traefik.swarm.lbswarm=${LB_SWARM:-true}
    - traefik.swarm.network=proxy
    - traefik.http.routers.affine${SERVICE_NAME_POST:-}.entrypoints=${TRAEFIK_ENTRYPOINT:-https}
    - traefik.http.routers.affine${SERVICE_NAME_POST:-}.rule=Host(`${DOMAIN?domain variable not set}`)
    - traefik.http.routers.affine${SERVICE_NAME_POST:-}.tls=true
    - traefik.http.routers.affine${SERVICE_NAME_POST:-}.middlewares=${MIDDLEWARE_SECURED:-default-secured@file}
    - traefik.http.routers.affine${SERVICE_NAME_POST:-}.service=affine${SERVICE_NAME_POST:-}
    - traefik.http.services.affine${SERVICE_NAME_POST:-}.loadbalancer.server.scheme=${PROTOCOL:-http}
    - traefik.http.services.affine${SERVICE_NAME_POST:-}.loadbalancer.server.port=${PORT:-3010}

x-basic-deploy: &basic-deploy
  mode: replicated
  replicas: 1
  placement:
    max_replicas_per_node: 1
    constraints:
      - "node.role==${NODE_ROLE:-manager}"
      - node.platform.os == linux
  restart_policy:
    condition: on-failure
  resources:
    limits:
      cpus: ${RESOURCES_LIMITS_CPUS:-2}
      memory: ${RESOURCES_LIMITS_MEMORY:-2g}
    reservations:
      cpus: ${RESOURCES_RESERVATIONS_CPUS:-0.001}
      memory: ${RESOURCES_RESERVATIONS_MEMORY:-32m}

x-basic: &basic
  env_file: ${ENV_FILE:-.env}
  cap_add: ["ALL"]
  # cap_add:
  #   - CHOWN
  #   - DAC_OVERRIDE
  #   - DAC_READ_SEARCH
  #   - SETGID
  #   - SETUID
  #   - FOWNER
  #   - FSETID
  # cap_drop: ["ALL"]
  security_opt:
    - no-new-privileges:true
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 655360
      hard: 655360
    fsize: -1
    as: -1
  networks:
    default: {}
    proxy: {}
  healthcheck:
    disable: true
  restart: always

################################################################################
################################################################################
################################################################################
services:
  ##############################################################################
  ##############################################################################
  ##############################################################################
  affine:
    # https://github.com/toeverything/AFFiNE/pkgs/container/affine-graphql
    image: ghcr.io/toeverything/affine-graphql:${VERSION_AFFINE:-stable-129ccea}
    <<: [*basic, *basic-deploy-labels]
    deploy:
      <<: [*basic-deploy, *basic-deploy-labels]
    environment:
      # AFFINE_ADMIN_EMAIL: ${AFFINE_ADMIN_EMAIL}
      # AFFINE_ADMIN_PASSWORD: ${AFFINE_ADMIN_PASSWORD}

      AFFINE_SERVER_HOST: ${DOMAIN?domain variable not set}
      AFFINE_SERVER_HTTPS: ${AFFINE_SERVER_HTTPS:-false}

      NODE_ENV: production
      NODE_OPTIONS: "--import=./scripts/register.js"
      AFFINE_CONFIG_PATH: /root/.affine/config

      REDIS_SERVER_HOST: valkey
      DATABASE_URL: postgres://${POSTGRES_USER:-affine}:${POSTGRES_PASSWORD_TMP}@postgresql:5432/${POSTGRES_DB:-affine}

      TELEMETRY_ENABLE: ${TELEMETRY_ENABLE:-false}
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - config:/root/.affine/config # custom configurations
      - storage:/root/.affine/storage # blob storage
    command:
      ["sh", "-c", "node ./scripts/self-host-predeploy && node ./dist/index.js"]

  ##############################################################################
  ##############################################################################
  ##############################################################################
  valkey:
    # https://hub.docker.com/r/valkey/valkey
    image: valkey/valkey:${VERSION_VALKEY:-8.0.1-alpine}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_VALKEY:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_VALKEY:-128M}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_VALKEY:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_VALKEY:-32m}
    cap_add:
      - SETGID
      - SETUID
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - valkey:/data
    command: --save 300 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

  ##############################################################################
  ##############################################################################
  ##############################################################################
  postgresql:
    # https://hub.docker.com/_/postgres
    image: postgres:${VERSION_POSTGRESQL:-17.1-alpine3.20}
    <<: *basic
    deploy:
      <<: *basic-deploy
      resources:
        limits:
          cpus: ${RESOURCES_LIMITS_CPUS_POSTGRESQL:-1}
          memory: ${RESOURCES_LIMITS_MEMORY_POSTGRESQL:-512M}
        reservations:
          cpus: ${RESOURCES_RESERVATIONS_CPUS_POSTGRESQL:-0.001}
          memory: ${RESOURCES_RESERVATIONS_MEMORY_POSTGRESQL:-32m}
    cap_add:
      - FOWNER
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    secrets:
      - postgres_password_file
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-affine}
      POSTGRES_USER: ${POSTGRES_USER:-affine}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password_file
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - postgresql:/var/lib/postgresql/data
    networks:
      default: {}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 2s
      interval: 5s
      timeout: 3s
      retries: 5

################################################################################
################################################################################
################################################################################
networks:
  default:
    name: affine${SERVICE_NAME_POST:-}
    driver: ${NETWORK_MODE:-overlay}
    attachable: true
    driver_opts:
      encrypted: "true"
  proxy:
    external: true

volumes:
  config:
    name: affine_config${SERVICE_NAME_POST:-}
  storage:
    name: affine_storage${SERVICE_NAME_POST:-}
  valkey:
    name: affine_valkey${SERVICE_NAME_POST:-}
  postgresql:
    name: affine_postgresql${SERVICE_NAME_POST:-}

secrets:
  postgres_password_file:
    file: config/secrets/postgres_password_file.txt
